всегда есть слой репозитария. его нельзя удалить и переименовать.

всегда есть шаблон по умолчанию. его нельзя удалить и переименовать, но можно менять атрибуты и графику.

шаблон содержит описание графики объекта:
* форма фигуры
* перо и цвет фигуры
* иконка из библиотеки
* шрифт и цвет текста
* имя атрибута текста
графическая инфаркта в притоне - кортеж из 5 элементов.

шаблон:
* ID (uuid, спец. для дефолтного)
* имя
* словарь {атрибут:дефолт}
* кортеж графики

объект копирует информацию из шаблона. если объект "свободный", то из шаблона по умолчанию.

объект:
* ID
* id шаблона
* словарь атрибутов
* кортеж графики
* флаг рефлекта
# ссылка на слой

связь:
* id начала
* id конца
* метка (="")
* направленность
* кортеж графики
# ссылка на слой

слой (имя является ID):
* множество объектов
* множество связей
* только визуальные объекты (текст, картинки и т.п.)
* параметры графики (фон, шрифт, цвет шрифта)
# ссылка на мир

фильтр (кортеж двух функций):
* выражение для filter объектов
# выбор связей для этих объектов
* выражение для filter связей

@ шаблоны атрибутов (для сложных типов)?
@ фильтры для слоя или мира?
@ подстановка кода фильтров?
@ подстановка кода событий?
@ события изменения атрибутов?
@ события изменения списка атрибутов
@ для слоя: событие изменения связей
@ наследование рефлектами событий атрибутов?
@ какие типы событий?

Репозитарий:
# id дефолтного шаблона
# список всех ID шаблонов, опционально - фильтр
# список имен шаблонов для списка id
# список всех id объектов, опционально - фильтр
# создать шаблон (опционально из другого) -> ID шаблона
# создать объект (?шаблон, ?оригинал) -> ID объекта
# удалить список шаблонов
# удалить список объектов
% отразить объект на слой
% редактировать шаблон
% редактировать объект

слой:
% создать объект (рефлект, из шаблона, совсем новый)
% создать связь между объектами
% удалить объект (только локально)
% удалить связь
% изменить расположение объектов и связей
% отображение объектов по фильтрам

двигатели:
* флаг разрешения просмотра
* флаг разрешения редактирования
* запуск скрипта как модуля ( из дерева, консоли или редактора)
* __init__ для модуля может добавлять кнопки на тулбаре. выполняется при обновлении дерева (даже если нет показа скриптов)
% добавить каталог или модуль (сразу с __init__)
% добавить скрипт
% удалить любой фрагмент дерева скриптов
построение дерева:
идем по файловой структуре. добавляем каталоги. если находим __init__, меняем картинку на пакет, выполняем импорт модуля. если находим рус - рисуем бинарник, если есть такой же ру - рисуем его, как текст.
подумать над защитой миров от НСД/НСП.
Продумать экспорт и импорт скриптов (и отчетов) для обмена опытом между мирами

отчеты:
* флаг разрешения редактирования
* запуск превью
* запуск доставки (локально в мир, с копиями по адресам: почта,vfs-URI)
* просмотр выпущенных отчетов